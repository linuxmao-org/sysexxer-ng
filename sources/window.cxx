// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "app_i18n.h"
#include "window.h"
#include "dnd_hold_browser.h"
#include "hyperlink_button.h"
#include "window_impl.cc"

void Main_Window::cb_btn_load_i(Fl_Button*, void*) {
  P->on_load();
}
void Main_Window::cb_btn_load(Fl_Button* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_btn_load_i(o,v);
}

void Main_Window::cb_btn_send_i(Fl_Button*, void*) {
  P->on_send();
}
void Main_Window::cb_btn_send(Fl_Button* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_btn_send_i(o,v);
}

void Main_Window::cb_br_sendlist_i(Dnd_Hold_Browser*, void*) {
  P->update_event_data_display(1);
}
void Main_Window::cb_br_sendlist(Dnd_Hold_Browser* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_br_sendlist_i(o,v);
}

void Main_Window::cb_btn_receive_i(Fl_Button* o, void*) {
  P->on_receive(o->value());
}
void Main_Window::cb_btn_receive(Fl_Button* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_btn_receive_i(o,v);
}

void Main_Window::cb_btn_save_i(Fl_Button*, void*) {
  P->on_save();
}
void Main_Window::cb_btn_save(Fl_Button* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_btn_save_i(o,v);
}

void Main_Window::cb_br_recvlist_i(Fl_Hold_Browser*, void*) {
  P->update_event_data_display(0);
}
void Main_Window::cb_br_recvlist(Fl_Hold_Browser* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_br_recvlist_i(o,v);
}

void Main_Window::cb_cb_midi_interface_i(Fl_Choice*, void*) {
  P->on_change_midi_interface();
}
void Main_Window::cb_cb_midi_interface(Fl_Choice* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_cb_midi_interface_i(o,v);
}

void Main_Window::cb_val_sendrate_i(Fl_Slider*, void*) {
  P->on_change_send_rate();
}
void Main_Window::cb_val_sendrate(Fl_Slider* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_val_sendrate_i(o,v);
}

void Main_Window::cb_btn_midi_in_i(Fl_Button*, void*) {
  P->ask_midi_in();
}
void Main_Window::cb_btn_midi_in(Fl_Button* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_btn_midi_in_i(o,v);
}

void Main_Window::cb_btn_midi_out_i(Fl_Button*, void*) {
  P->ask_midi_out();
}
void Main_Window::cb_btn_midi_out(Fl_Button* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_btn_midi_out_i(o,v);
}

void Main_Window::cb_https_i(Hyperlink_Button* o, void*) {
  fl_open_uri(o->label());
}
void Main_Window::cb_https(Hyperlink_Button* o, void* v) {
  ((Main_Window*)(o->parent()->parent()->parent()))->cb_https_i(o,v);
}
Main_Window::Main_Window(int X, int Y, int W, int H, const char *L)
  : Fl_Group(X, Y, W, H, L) {
P.reset(new Impl);
{ Fl_Box* o = new Fl_Box(0, 0, 465, 26, _("Sysexxer NG"));
  o->box(FL_THIN_UP_BOX);
  o->labeltype(FL_EMBOSSED_LABEL);
  o->labelfont(11);
  o->labelsize(20);
  o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
} // Fl_Box* o
{ tabs = new Fl_Tabs(0, 0, 465, 250);
  { tab_send = new Fl_Group(0, 25, 465, 225, _("Send"));
    tab_send->box(FL_THIN_UP_FRAME);
    tab_send->labelsize(12);
    { btn_load = new Fl_Button(10, 35, 115, 25, _("@fileopen  Load"));
      btn_load->labelsize(12);
      btn_load->callback((Fl_Callback*)cb_btn_load);
      btn_load->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Button* btn_load
    { btn_send = new Fl_Button(10, 60, 115, 25, _("@->  Send"));
      btn_send->labelsize(12);
      btn_send->callback((Fl_Callback*)cb_btn_send);
      btn_send->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Button* btn_send
    { br_sendlist = new Dnd_Hold_Browser(135, 35, 320, 75);
      br_sendlist->box(FL_NO_BOX);
      br_sendlist->color(FL_BACKGROUND2_COLOR);
      br_sendlist->selection_color(FL_SELECTION_COLOR);
      br_sendlist->labeltype(FL_NORMAL_LABEL);
      br_sendlist->labelfont(0);
      br_sendlist->labelsize(12);
      br_sendlist->labelcolor(FL_FOREGROUND_COLOR);
      br_sendlist->textsize(12);
      br_sendlist->callback((Fl_Callback*)cb_br_sendlist);
      br_sendlist->align(Fl_Align(FL_ALIGN_BOTTOM));
      br_sendlist->when(FL_WHEN_RELEASE_ALWAYS);
    } // Dnd_Hold_Browser* br_sendlist
    { txt_senddata = new Fl_Text_Display(10, 120, 445, 120);
      txt_senddata->labelsize(12);
      txt_senddata->textfont(4);
      txt_senddata->textsize(12);
    } // Fl_Text_Display* txt_senddata
    { pb_send = new Fl_Progress(10, 85, 115, 25);
      pb_send->color(FL_BACKGROUND_COLOR);
      pb_send->selection_color((Fl_Color)150);
      pb_send->labelsize(12);
    } // Fl_Progress* pb_send
    tab_send->end();
  } // Fl_Group* tab_send
  { tab_recv = new Fl_Group(0, 25, 465, 225, _("Receive"));
    tab_recv->labelsize(12);
    tab_recv->hide();
    { btn_receive = new Fl_Button(10, 35, 115, 25, _("@<-  Receive"));
      btn_receive->type(1);
      btn_receive->labelsize(12);
      btn_receive->callback((Fl_Callback*)cb_btn_receive);
      btn_receive->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Button* btn_receive
    { btn_save = new Fl_Button(10, 60, 115, 25, _("@filesave  Save"));
      btn_save->labelsize(12);
      btn_save->callback((Fl_Callback*)cb_btn_save);
      btn_save->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Button* btn_save
    { br_recvlist = new Fl_Hold_Browser(135, 35, 320, 75);
      br_recvlist->box(FL_NO_BOX);
      br_recvlist->color(FL_BACKGROUND2_COLOR);
      br_recvlist->selection_color(FL_SELECTION_COLOR);
      br_recvlist->labeltype(FL_NORMAL_LABEL);
      br_recvlist->labelfont(0);
      br_recvlist->labelsize(12);
      br_recvlist->labelcolor(FL_FOREGROUND_COLOR);
      br_recvlist->textsize(12);
      br_recvlist->callback((Fl_Callback*)cb_br_recvlist);
      br_recvlist->align(Fl_Align(FL_ALIGN_BOTTOM));
      br_recvlist->when(FL_WHEN_RELEASE_ALWAYS);
    } // Fl_Hold_Browser* br_recvlist
    { txt_recvdata = new Fl_Text_Display(10, 120, 445, 120);
      txt_recvdata->labelsize(12);
      txt_recvdata->textfont(4);
      txt_recvdata->textsize(12);
    } // Fl_Text_Display* txt_recvdata
    { lbl_recv = new Fl_Box(10, 85, 115, 25);
      lbl_recv->box(FL_DOWN_BOX);
      lbl_recv->color((Fl_Color)150);
      lbl_recv->labelsize(12);
    } // Fl_Box* lbl_recv
    tab_recv->end();
  } // Fl_Group* tab_recv
  { tab_options = new Fl_Group(0, 25, 465, 225, _("Options"));
    tab_options->labelsize(12);
    tab_options->hide();
    { Fl_Box* o = new Fl_Box(10, 35, 180, 25, _("MIDI interface"));
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(10, 125, 180, 25, _("Max Transmission Rate"));
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { cb_midi_interface = new Fl_Choice(225, 35, 155, 25);
      cb_midi_interface->down_box(FL_BORDER_BOX);
      cb_midi_interface->labelsize(12);
      cb_midi_interface->textsize(12);
      cb_midi_interface->callback((Fl_Callback*)cb_cb_midi_interface);
    } // Fl_Choice* cb_midi_interface
    { val_sendrate = new Fl_Slider(225, 125, 100, 25);
      val_sendrate->type(1);
      val_sendrate->labelsize(12);
      val_sendrate->callback((Fl_Callback*)cb_val_sendrate);
      val_sendrate->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Slider* val_sendrate
    { lbl_sendrate = new Fl_Box(325, 125, 55, 25);
      lbl_sendrate->box(FL_DOWN_BOX);
      lbl_sendrate->labelsize(12);
    } // Fl_Box* lbl_sendrate
    { Fl_Box* o = new Fl_Box(385, 125, 55, 25, _("kb/s"));
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { lbl_midi_in = new Fl_Box(225, 65, 155, 25);
      lbl_midi_in->box(FL_DOWN_BOX);
      lbl_midi_in->labelsize(12);
      lbl_midi_in->align(Fl_Align(68|FL_ALIGN_INSIDE));
    } // Fl_Box* lbl_midi_in
    { lbl_midi_out = new Fl_Box(225, 95, 155, 25);
      lbl_midi_out->box(FL_DOWN_BOX);
      lbl_midi_out->labelsize(12);
      lbl_midi_out->align(Fl_Align(68|FL_ALIGN_INSIDE));
    } // Fl_Box* lbl_midi_out
    { btn_midi_in = new Fl_Button(385, 65, 25, 25, _("@DnArrow"));
      btn_midi_in->callback((Fl_Callback*)cb_btn_midi_in);
    } // Fl_Button* btn_midi_in
    { btn_midi_out = new Fl_Button(385, 95, 25, 25, _("@DnArrow"));
      btn_midi_out->callback((Fl_Callback*)cb_btn_midi_out);
    } // Fl_Button* btn_midi_out
    { Fl_Box* o = new Fl_Box(10, 65, 180, 25, _("MIDI input port"));
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(10, 95, 180, 25, _("MIDI output port"));
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    tab_options->end();
  } // Fl_Group* tab_options
  { Fl_Group* o = new Fl_Group(0, 25, 465, 225, _("About"));
    o->labelsize(12);
    o->hide();
    { txt_about = new Fl_Text_Display(10, 35, 445, 140);
      txt_about->box(FL_THIN_DOWN_BOX);
      txt_about->labelsize(12);
      txt_about->textsize(12);
    } // Fl_Text_Display* txt_about
    { Hyperlink_Button* o = new Hyperlink_Button(10, 215, 325, 20, _("https://github.com/linuxmao-org/sysexxer-ng"));
      o->box(FL_NO_BOX);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(1);
      o->labelsize(12);
      o->labelcolor((Fl_Color)4);
      o->callback((Fl_Callback*)cb_https);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
    } // Hyperlink_Button* o
    { Fl_Box* o = new Fl_Box(10, 195, 325, 20, _("Visit the home page"));
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    o->end();
  } // Fl_Group* o
  tabs->end();
} // Fl_Tabs* tabs
P->init(this);
end();
}

Main_Window::~Main_Window() {
  ;
}

void Main_Window::load_file(const char *filename) {
  P->do_load(filename);
}
